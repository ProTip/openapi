swagger: '2.0'
info:
  version: 1.0.0
  title: Rundeck
  license:
    name: MIT
basePath: '/api/23'
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /user/list:
    get:
      produces:
        - 'application/json'
      summary: List user profiles
      operationId: listUsers
      tags:
      - user
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: { $ref: '#/definitions/User'} }

  /user/info:
    get:
      summary: Get same user profile data
      operationId: getUserProfile
      tags:
      - user
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}
    post:
      summary: Modify same user profile data
      operationId: modifyUserProfile
      tags:
      - user
      parameters:
      - in: body
        name: User
        description: New user profile data
        required: true
        schema: {$ref: '#/definitions/ModifyUserRequest'}
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}

  /user/info/{userID}:
    get:
      summary: Get another user's profile data
      operationId: getUserProfileByID
      tags:
      - user
      parameters:
      - name: userID
        in: path
        required: true
        description: The ID of the user to retrieve profile information for
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}
    post:
      summary: Modify another user's profile data
      operationId: modifyUserProfileByID
      tags:
      - user
      parameters:
      - name: userID
        in: path
        required: true
        description: The ID of the user to retrieve profile information for
        type: string
      - in: body
        name: User
        description: New user profile data
        required: true
        schema: {$ref: '#/definitions/ModifyUserRequest'}
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/User'}

  /system/logstorage:
    get:
      summary: Get Log Storage information and stats
      operationId: getLogStorageInfo
      tags:
      - system
      - log
      responses:
        '200':
          description: Expected reponse to a valid request
          schema: {$ref: '#/definitions/LogStorage'}
  
  /system/logstorage/incomplete:
    get:
      summary: List all executions with incomplete log storage
      operationId: getIncompleteLogStorageExecutions
      tags:
      - system
      - execution
      - log
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/IncompleteLogExecutions'}
  
  /system/logstorage/incomplete/resume:
    post:
      summary: Resume processing incomplete Log Storage uploads
      operationId: resumeIncompleteLogStorageExecutions
      tags:
      - system
      - execution
      - log
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            properties:
              resumed: {type: boolean}

  /system/executions/enable:
    post:
      summary: Enables executions, allowing adhoc and manual and scheduled jobs to be run
      operationId: enableExecutions
      tags:
      - system
      - execution
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            properties:
              executionMode: {type: string}

  /system/executions/disable:
    post:
      summary: Disables executions, preventing adhoc and manual and scheduled jobs from running.
      operationId: disableExecutions
      tags:
      - system
      - execution
      responses:
        '200':
          description: Expected response to a valid request
          schema:
            properties:
              executionMode: {type: string}
  
  /scheduler/takeover:
    put:
      summary: Tell a Rundeck server in cluster mode to claim all scheduled jobs from another cluster server
      operationId:  takeoverJobs
      tags:
      - scheduler
      - cluster
      - job
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/TakeoverScheduleResponse'}

  /scheduler/server/{uuid}/jobs:
    get:
      summary: List the scheduled Jobs with their schedule owned by the cluster server with the specified UUID
      operationId: listScheduledJobsForServer
      tags:
      - scheduler
      - cluster
      - job
      parameters:
      - name: uuid
        in: path
        required: true
        description: The ID of the user to retrieve profile information for
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: {$ref: '#/definitions/Job'}}

  /scheduler/jobs:
    get:
      summary: List the scheduled Jobs with their schedule owned by the cluster server
      operationId: listScheduledJobs
      tags:
      - scheduler
      - cluster
      - job
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: {$ref: '#/definitions/Job'}}

  /system/acl:
    get:
      summary: List ACL Policies
      operationId: listAclPolicies
      tags:
      - system
      - acl
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/AclList'}

  /system/acl/{policyName}:
    get:
      summary: Retrieve the YAML texas of the ACL Policy file
      operationId: getPolicyFile
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: true
        description: Policy file name
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/AclPolicyResponse'}
    post:  
      summary: Create a policy
      operationId: createPolicy
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: True
        description: Policy file name
        type: string
      responses:
        '201':
          description: Created
          schema: {$ref: '#/definitions/AclPolicyResponse'}
        '409':
          description: Conflict
        '400':
          description: Bad Request
          schema: {$ref: '#/definitions/InvalidAclPolicyResponse'}
    put:
      summary: Update policy
      operationId: updatePolicy
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: True
        description: Policy file name
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {$ref: '#/definitions/AclPolicyResponse'}
        '404':
          description: Policy not found
    delete:
      summary: Delete policy
      operationId: deletePolicy
      tags:
      - system
      - acl
      parameters:
      - name: policyName
        in: path
        required: True
        description: Policy file name
        type: string
      responses:
        '204':
          description: Policy deleted
        '404':
          description: Policy not found

  /project/{project}/jobs:
    get:
      summary: List the jobs that exist for a project
      operationId: listProjectJobs
      tags:
      - project
      - job
      parameters:
      - name: project
        in: path
        required: True
        description: Project name
        type: string
      - name: idList
        in: query
        required: false
        description: Comma separated list of Job IDs to include
        type: string
      - name: groupPath
        in: query
        required: false
        description: Group or partial group path to include all jobs within that group path. Set to the special value "-" to match the top level jobs only.
        default: '*'
        type: string
      - name: jobFilter
        in: query
        required: false
        description: A filter for the job name. Matches any job name that contains this value.
        type: string
      - name: jobExactFilter
        in: query
        required: false
        description: An exact job name to match.
        type: string
      - name: groupPathExact
        in: query
        required: false
        description: An exact group path to match. Set to the special value "-" to match the top level jobs only.
        type: string
      - name: scheduledFilter
        in: query
        required: false
        description: Specify whether to return only scheduled or only not scheduled jobs.
        type: boolean
      - name: serverNodeUUIDFilter
        in: query
        required: false
        description: In cluster mode, use to select scheduled jobs assigned to the server with the given UUID.
        type: string
      responses:
        '200':
          description: Expected response to a valid request
          schema: {type: array, items: {$ref: '#/definitions/Job'}}

  /job/{id}/executions:
    post:
      summary: Run the specified job
      operationId: runJob
      tags:
      - job
      - execution
      parameters:
      - name: id
        in: path
        required: True
        description: ID of job to run
        type: integer
      - name: request
        in: body
        required: false
        schema: {$ref: '#/definitions/ExecuteJobRequest'}
      responses:
        '200':
          description: Expected response for a valid request
          schema: {$ref: '#/definitions/ExecutionList'}
  
  /job/{jobID}/retry/{executionID}:
    post:
      summary: Retry a failed job execution on failed nodes only or on the same as the execution. This is the same functionality as the `Retry Failed Nodes ...` button on the execution page.
      operationId: retryJobExecution
      tags:
      - job
      - execution
      parameters:
      - name: jobID
        in: path
        required: true
        type: number
      - name: executionID
        in: path
        required: true
        type: integer
      - name: Request
        in: body
        required: false
        schema: {$ref: '#/definitions/RetryExecutionRequest'}
      responses:
        '200':
          description: Exected response to a valid request.
          schema: {$ref: '#/definitions/ExecutionList'}

  /project/{project}/jobs/export:
    get:
      summary: Export the job definitions in XML or YAML formats.
      operationId: exportJobs
      tags:
      - job
      - project
      parameters:
      - name: project
        in: path
        required: True
        description: The project to export jobs for.
        type: string
      - name: format
        in: query
        required: false
        description: XML or YAML format for exported jobs.
        type: string
        enum: ['xml', 'yaml']
        default: xml
      - name: idlist
        in: query
        required: false
        description: A comma-separated list of Job IDs to export.
        type: string
      - name: groupPath
        in: query
        required: false
        description: Group or partial group path to include all jobs within that group path.
        type: string
      - name: jobFilter
        in: query
        required: false
        description: Filter for the job Name.
        type: string
      responses:
        '200':
          description: Expected response to a valid request.
          schema: {type: string}

  /project/{project}/jobs/import:
    post:
      summary: Import job definitions in XML or YAML formats.
      operationId: importJobs
      tags:
      - job
      - project
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      responses:
        '200':
          description: Expected response to a valid request.
  
  /job/{id}:
    get:
      summary: Export a single job definition in XML or YAML formats.
      operationId: getJob
      tags:
      - job
      parameters:
      - name: id
        in: path
        required: True
        description: ID of the job to export.
        type: integer
      - name: format
        in: query
        required: false
        type: string
        enum: ['xml', 'yaml']
        default: xml
      responses:
        '200':
          description: Expected response to a valid request.
          schema:
            properties:
              content: {type: string}
    delete:
      summary: Delete a single job definition.
      operationId: deleteJob
      tags:
      - job
      parameters:
      - name: id
        in: path
        required: True
        description: ID of job to delete.
        type: number
      responses:
        '204':
          description: Job was deleted.
        '404':
          description: Job not found.

  /project/{project}/import:
    put:
      summary: Import project archive to job.
      operationId: importProjectArchive
      tags:
      - job
      - project
      consumes:
         - application/zip
      parameters:
      - name: project
        in: path
        required: True
        description: Name of the project to import jobs into.
        type: string
      - name: jobUuidOption
        in: query
        type: string
        enum: [preserve, remove]
        default: remove
      - name: importExecutions
        in: query
        type: boolean
      - name: importConfig
        in: query
        type: boolean
      - name: importACL
        in: query
        type: boolean
      - name: File
        in: body
        required: true
        x-ms-parameter-location: method 
        schema:
          type: object
          format: file

      responses:
        '200':
          description: Expected response to a valid request.



        

  # /jobs/delete:
  #   delete:
  #     summary: Delete multiple job definitions at once.
  #     operationId: deleteJobsBulk
  #     tags:
  #     - job
  #     parameters:
  #     - name: Request
  #       in: body
  #       required: True
  #       type:
  #         properties:
  #           ids:  {type: array, items: string}
  #           idList:
  #             description: Comma separated list of job IDs.
  #             type: string


definitions:
  User:
    properties:
      login:      {type: string}
      firstName:  {type: string}
      lastName:   {type: string}
      email:      {type: string}
  ModifyUserRequest:
    properties:
      firstName:  {type: string}
      lastName:   {type: string}
      email:      {type: string}
  SystemInfo:
    properties:
      system:
        properties:
          timestamp:
            properties:
              epoch:    {type: number}
              unit:     {type: string}
              datetime: {type: string}
          rundeck:
            properties:
              version:     {type: string}
              build:       {type: string}
              node:        {type: string}
              base:        {type: string}
              apiversion:  {type: number}
              serverUUID:  {type: string}
          executions:
            properties:
              active:        {type: boolean}
              executionMode: {type: string}
          os:
            properties:
              arch:    {type: string}
              name:    {type: string}
              version: {type: string}
          jvm:
            properties:
              name:                  {type: string}
              vendor:                {type: string}
              version:               {type: string}
              implementationVersion: {type: string}
          stats:
            properties:
              uptime:
                properties:
                  duration: {type: number}
                  unit:     {type: string}
                  since:
                    properties:
                      epoch:    {type: number}
                      unit:     {type: string}
                      datetime: {type: string}
              cpu:
                properties:
                  loadAverage:
                    properties:
                      unit:    {type: string}
                      average: {type: number}
                  processors: {type: number}
              memory:
                properties:
                  unit:  {type: string}
                  max:   {type: number}
                  free:  {type: number}
                  total: {type: number}
              scheduler:
                properties:
                  running:        {type: number}
                  threadPoolSize: {type: number}
              threads:
                properties:
                  active: {type: number}
          metrics:
            properties:
              href:        {type: string}
              contentType: {type: string}
          threadDump:
            properties:
              href:        {type: string}
              contentType: {type: string}
  LogStorage:
    properties:
      enabled:
        type: boolean
        description: True if plugin is configured
      pluginName:
        type: string
        description: Name of the configured plugin
      succeededCount:
        type: number
        description: Number of successful storage requests
      failedCount:
        type: number
        description: Number of failed storage requests
      queuedCount:
        type: number
        description: Number of queued storage requests
      totalCount:
        type: number
        description: Total number of storage requests (currently queued plus previously processed)
      incompleteCount:
        type: number
        description: Number of storage requests which have not completed successfully
      missingCount:
        type: number
        description: Number of executions for this cluster node which have no associated storage requests
  IncompleteLogExecution:
    properties:
      id: {type: string}
      project: {type: string}
      href: {type: string}
      permalink: {type: string}
      storage:
        properties:
          localFilesPresent: {type: boolean}
          incompleteFiletypes: {type: array, items: {type: string}}
          queued: {type: boolean}
          failed: {type: boolean}
          date: {type: string}
      errors: {type: array, items: {type: string}}

  IncompleteFileType:
    type: string
    enum: ['rdlog', 'state.json', 'execution.xml']
    description: Comma-separated list of filetypes which have not be uploaded, e.g. rdlog,state.json. Types are rdlog (log output), state.json (workflow state data), execution.xml (execution definition)

  IncompleteLogExecutions:
    properties:
      total:  {type: number}
      max:    {type: number}
      offset: {type: number}
      executions:
        type: array
        items: {$ref: '#/definitions/IncompleteLogExecution'}

  TakeoverScheduleRequest:
    properties:
      server:
        properties:
          uuid:    {type: string}
          all:     {type: boolean}
      project: {type: string}
      job:
        properties:
          id: {type: string}

  JobReference:
    properties:
      href:             {type: string}
      permalink:        {type: string}
      id:               {type: string}
      pervious-owner:   {type: string}

  TakeoverScheduleResponse:
    properties:
      takeoverSchedule:
        properties:
          project: {type: string}
          jobs:
            properties:
              failed:       {type: array, items: {$ref: '#/definitions/JobReference'}}
              successfull:  {type: array, items: {$ref: '#/definitions/JobReference'}}
              total:        {type: number}
          server:
            properties:
              uuid: {type: string}
              all:  {type: boolean}
      self:
        properties:
          server:
            properties:
              uuid: {type: string}
      message:    {type: string}
      apiversion: {type: number}
      success:    {type: boolean}

  Job:
    properties:
      id:               {type: string}
      name:             {type: string}
      group:            {type: string}
      project:          {type: string}
      description:      {type: string}
      href:             {type: string}
      permalink:        {type: string}
      scheduled:        {type: boolean}
      scheduleEnabled:  {type: boolean}
      serverNodeUUID:   {type: string}
      serverOwner:      {type: string}
      enabled:          {type: boolean}

  JobMetadata:
    properties:
      id:               {type: string}
      name:             {type: string}
      group:            {type: string}
      project:          {type: string}
      description:      {type: string}
      href:             {type: string}
      permalink:        {type: string}
      scheduled:        {type: boolean}
      scheduleEnabled:  {type: boolean}
      averageDuration:  {type: number}
      options:          {type: object}

  DeleteJobResponse:
    properties:
      requestCount:
        description: The number of job IDs that were in the delete request.
        type: number
      allsuccessful: {type: boolean}
      

  ExecutionList:
    properties:
      paging:
        properties:
          count:  {type: number}
          total:  {type: number}
          offset: {type: number}
          max:    {type: number}
      executions: {type: array, items: {$ref: '#/definitions/Execution'}}

  Execution:
    properties:
      id:           {type: number}
      href:         {type: string}
      permalink:    {type: string} 
      status:       {type: string, enum: ['running', 'succeeded', 'failed', 'aborted', 'timedout', 'failed-with-retry', 'scheduled', 'other']}
      customStatus: {type: string}  
      project:      {type: string} 
      user:         {type: string}  
      serverUUID:   {type: string}   
      date-started:
        properties:
          unixtime: {type: number}
          date:     {type: string}
      job:             {$ref: '#/definitions/JobMetadata'}
      description:     {type: string}
      argstring:       {type: string}
      successfulNodes: {type: array, items: {type: string}}

  AclReference:
    properties:
      path:  {type: string}
      type:  {type: string}
      name:  {type: string}
      href:  {type: string}

  AclList:
    properties:
      path:       {type: string}
      type:       {type: string}
      href:       {type: string}
      resources:  {type: array, items: {$ref: '#/definitions/AclReference'}}

  AclPolicyResponse:
    properties:
      content:
        type: string
        description: Policy as JSON encoded YAML string

  InvalidAclPolicyResponse:
    properties:
      valid: {type: boolean}
      policies:
        type: array
        items:
          type: object
          properties:
            policy: {type: string}
            errors: {type: array, items: {type: string}}

  RetryExecutionRequest:
    properties:
      argString:
        description: Argument string to pass to the job, of the form `-opt value -opt2 value ...`
        type: string
      loglevel:
        description: Loglevel to use
        type: string
        enum: ['DEBUG', 'VERBOSE', 'INFO', 'WARN', 'ERROR']
      asUser:
        description: A username identifying the user who ran the job. Requires `runAs` permission.
        type: string
      options:
        description: Option value for option named `OPTNAME`. If specified the `argString` value is ignored (*API v18* or later).
        type: object

  ExecuteJobRequest:
    properties:
      argString:
        description: Argument string to pass to the job, of the form `-opt value -opt2 value ...`
        type: string
      loglevel:
        description: Loglevel to use
        type: string
        enum: ['DEBUG', 'VERBOSE', 'INFO', 'WARN', 'ERROR']
      asUser:
        description: A username identifying the user who ran the job. Requires `runAs` permission.
        type: string
      filter:
        description: A node filter string.
        type: string
      runAtTime:
        description: Specify a time to run the job (*API v18* or later). `ISO-8601` format with optional milliseconds.
        type: string
      options:
        description: Option value for option named `OPTNAME`. If specified the `argString` value is ignored (*API v18* or later).
        type: object